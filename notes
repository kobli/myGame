TODO (also see spellSystem.lua)
===============================
- fix player colliders not disappearing after disconnect
	- destroy events are not being sent, because we would be trying to serialize an object which is not fully constructed / is almost deleted
		-> do not send destr. events for components, just for whole entity... and recreate them on the client
			- what if later we want to destroy only a component? probably will be needed for magic
			- the problem is that we are trying to serialize incomplete objects
				=> remove componentPtr from entityEvent
	- get rid of componentPtr in entityEvent
		- create componentFactory
		- group components inside entity into list? why / (why not)?
			- how does a user pick the right component?
				-> only one component of each type per object
					- what about graphics components? character casting a spell, and his name above him?
					- multiple graphics components, with string and numeric user ID (an ID provided by the user)
		- DO NOT send create events without data - the objects would be created with funny parameters

- clean the code, remove useless printouts, refactor
- better hill climbing detection? so player cannot push other players around ... especially lower/no angular friction
- character sometimes falls through the ground
- character is not a wizard

- implement attack spells
	-	area affectors with time period, that can deal damage and alter other player stats
		- player stats, HP
		- types of affectors
			- repetitive = give player a de/buff
			- apply_once = (only for damage?)
			- or only one type (apply_once) that either adds a buff or alters HP or .. 
	- graphic effects (particle systems, opaque glowing spheres, ..) with dynamic color and scale
	? buffs
		- list of Buff objects, each buff can affect several abilities (so such buffs can be removed easily) (multiplicative or additive), effect repeat timers, expiration timers
		- how does buff die? timer expired, canceled (character died / spell), the affector died, ..?
- multiplying effect with stacking bodies
- merging bodies from someone else
? interrupt casting when: character dies / takes dmg / moves (/ is teleported) / ...
	=> can these events be detected?
x on client binding controls to an entity (= client side prediction for movement) - YAGNI
- binding clients camera to an entity
- different modes for launching spell: from hands in look_at direction, at target location, ..?
- GUI
	-	number of each class in their team
	- which class does the player next to me have?
	- chat / at least TS3/.. for the start
	- changing spells, some kind of spellbook
	- interface for creating spells
	? testing spells


notes
===============================
- in terrain 2 meter spacing between vertices is OK ... usually!!
- all logic is in systems, EntityComponents contain only data (which will be broadcasted to clients)
	- some systems will be implemented in C++, others in a scripting language
	- some systems will run on server, others on client
- what needs to be done when adding new component type: (not all of it if the component is serverside / does not send data)
	- add value to enum ComponentType
	- create derived class from EntityComponent
	- add virtual overloads in serdes.hpp and serializable.hpp
	- add case to the receive switch that creates the component if it does not exist
	- add field, getter and setter in the EntityComponent
- graphics component subtypes:
	* mesh (/ animated)
	* sphere
	- particleSystem
	- light
	- cube
	- textBillboard
	- billboard
	x skybox/dome
	x terrain
	x water surface
